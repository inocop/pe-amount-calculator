{"version":3,"sources":["main/contexts/FormContext.ts","main/contexts/FormContextProvider.tsx","main/components/CalculationResultTable/TableItem.tsx","main/components/CalculationResultTable/index.tsx","shared/hooks/usePeLineAmountCalculator.ts","main/components/ReferenceValueForm.tsx","shared/components/ColorModeSwitcher.tsx","main/components/Header.tsx","main/components/Template.tsx","main/index.tsx","index.tsx"],"names":["FormStateContex","React","FormCommandContext","reducer","produce","state","action","type","formValue","value","FormContextProvider","children","peSize","amount","command","dispatch","saveFormValue","clearFormValue","generateCommand","Provider","TableItem","item","isNumeric","CalculationResultTable","useContext","resultValues","PeLineAmountCalculator","run","usePeLineAmountCalculator","length","variant","map","color","href","target","rel","ReferenceValueForm","useState","setFormValue","handleOnChange","event","currentTarget","name","form","onSubmit","preventDefault","spacing","id","isRequired","inputMode","placeholder","onChange","pattern","ColorModeSwitcher","props","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","fontSize","marginLeft","onClick","icon","aria-label","Header","h","justify","align","borderRadius","boxSize","src","process","as","isTruncated","Template","minH","templateRows","templateColumns","base","md","templateAreas","gridArea","margin","Main","theme","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0d83e620.chunk.js","sourcesContent":["import * as React from 'react'\nimport { InputValue } from '../../shared/hooks/usePeLineAmountCalculator'\n\nexport type State = {\n  formValue: InputValue\n}\n\nexport type Command = {\n  saveFormValue: (formValue: InputValue) => void\n  clearFormValue: () => void\n}\n\nexport const FormStateContex = React.createContext<State>(null as any)\nexport const FormCommandContext = React.createContext<Command>(null as any)\n","import * as React from 'react'\nimport produce from 'immer'\nimport { State, Command, FormStateContex, FormCommandContext } from './FormContext'\nimport { InputValue } from '../../shared/hooks/usePeLineAmountCalculator'\n\ntype Action =\n  | { type: 'commitFormValue'; value: InputValue }\n\nconst reducer = produce((state: State, action: Action) => {\n  switch (action.type) {\n    case 'commitFormValue':\n      state.formValue = action.value\n      break\n    default:\n      return state\n  }\n})\n\nconst generateCommand = (dispatch: React.Dispatch<Action>): Command => {\n  return {\n    saveFormValue: (formValue) => {\n      dispatch({ type: 'commitFormValue', value: formValue })\n    },\n    clearFormValue: () => {\n      dispatch({ type: 'commitFormValue', value: { peSize: '', amount: '' }})\n    }\n  }\n}\n\nexport const FormContextProvider: React.FC = ({ children }) => {\n  const [state, dispatch] = React.useReducer(reducer, { formValue: { peSize: '', amount: '' } })\n  const command = generateCommand(dispatch)\n\n  return (\n    <FormStateContex.Provider value={state}>\n      <FormCommandContext.Provider value={command}>\n        {children}\n      </FormCommandContext.Provider>\n    </FormStateContex.Provider>\n  )\n}\n\n","\nimport { Td, Tr } from '@chakra-ui/react'\nimport { ReferenceValue } from 'pe-line-amount-calculator'\nimport React, { FC } from 'react'\n\ntype Props = {\n  item: ReferenceValue\n}\n\nexport const TableItem: FC<Props> = ({ item }) => {\n  return (\n    <Tr>\n      <Td>{item.peSize}号</Td>\n      <Td isNumeric>{item.amount}m</Td>\n    </Tr>\n  )\n}\n","\nimport { Table, TableCaption, Tbody, Th, Thead, Tr, Link, Code } from '@chakra-ui/react'\nimport React, { useContext } from 'react'\nimport { FormStateContex } from '../../contexts/FormContext'\nimport { TableItem } from './TableItem'\nimport { usePeLineAmountCalculator } from '../../../shared/hooks/usePeLineAmountCalculator'\n\nexport const CalculationResultTable = () => {\n  const { formValue: { peSize, amount } } = useContext(FormStateContex)\n  const resultValues = usePeLineAmountCalculator({ peSize, amount })\n\n  if (resultValues.length === 0) return null\n  return (\n    <Table variant=\"simple\">\n      <Thead>\n        <Tr>\n          <Th>号数</Th>\n          <Th isNumeric>糸巻量(m)</Th>\n        </Tr>\n      </Thead>\n      <Tbody>\n        { resultValues.map((value) => <TableItem key={value.peSize} item={value} />) }\n      </Tbody>\n      <TableCaption>\n        計算結果は\n        <Link color=\"teal.400\" href=\"http://www.jaftma.or.jp/standard/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          JAFTMA（日本釣用品工業会）\n        </Link>\n        によるPE糸の太さ標準規格<Code>1号=200d(デニール)</Code>を前提とした参考値になります。\n      </TableCaption>\n    </Table>\n  )\n}\n","import { PeLineAmountCalculator, ReferenceValue } from 'pe-line-amount-calculator'\n\nexport type InputValue = {\n  peSize: number | ''\n  amount: number | ''\n}\n\nexport const usePeLineAmountCalculator = ({ peSize, amount }: InputValue): ReferenceValue[] => {\n  if (!peSize || !amount) {\n    return []\n  }\n\n  return new PeLineAmountCalculator({ peSize, amount }).run()\n}\n","\nimport { chakra, VStack, FormControl, FormLabel, Input, FormErrorMessage, Button, Text } from '@chakra-ui/react'\nimport React, { ChangeEvent, FC, FormEvent, useState } from 'react'\nimport { useContext } from 'react'\nimport { InputValue } from '../../shared/hooks/usePeLineAmountCalculator'\nimport { FormCommandContext } from '../contexts/FormContext'\n\nexport const ReferenceValueForm: FC = () => {\n  const { saveFormValue } = useContext(FormCommandContext)\n\n  const [formValue, setFormValue] = useState<InputValue>({\n    peSize: '',\n    amount: '',\n  })\n\n  const handleOnChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setFormValue({ ...formValue, [event.currentTarget.name]: event.currentTarget.value })\n  }\n\n  const handleOnSubmit = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault()\n    saveFormValue(formValue)\n  }\n\n  return (\n    <chakra.form\n      onSubmit={handleOnSubmit}>\n      <VStack spacing={4}>\n        <Text>\n          お手持ちのリールに記載されているPEラインの糸巻量を入力してください。\n        </Text>\n        <FormControl id=\"peSize\" isRequired>\n          <FormLabel>号数</FormLabel>\n          <Input\n            name=\"peSize\"\n            type=\"text\"\n            inputMode=\"numeric\"\n            placeholder=\"e.g. 0.8\"\n            value={formValue.peSize}\n            onChange={handleOnChange}/>\n        </FormControl>\n\n        <FormControl id=\"amount\" isRequired>\n          <FormLabel>糸巻量(m)</FormLabel>\n          <Input\n            name=\"amount\"\n            type=\"text\"\n            inputMode=\"numeric\"\n            pattern=\"\\d*\"\n            placeholder=\"e.g. 200\"\n            value={formValue.amount}\n            onChange={handleOnChange}/>\n        </FormControl>\n\n        <Button type='submit'>計算</Button>\n      </VStack>\n    </chakra.form>\n  )\n}\n","import * as React from 'react'\nimport { useColorMode, useColorModeValue, IconButton, IconButtonProps } from '@chakra-ui/react'\nimport { FaMoon, FaSun } from 'react-icons/fa'\n\ntype ColorModeSwitcherProps = Omit<IconButtonProps, 'aria-label'>\n\nexport const ColorModeSwitcher: React.FC<ColorModeSwitcherProps> = (props) => {\n  const { toggleColorMode } = useColorMode()\n  const text = useColorModeValue('dark', 'light')\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun)\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      variant=\"ghost\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      aria-label={`Switch to ${text} mode`}\n      {...props}\n    />\n  )\n}\n","\nimport { Image, Flex, Heading, Spacer } from '@chakra-ui/react'\nimport React, { FC } from 'react'\nimport { ColorModeSwitcher } from '../../shared/components/ColorModeSwitcher'\n\nexport const Header: FC = () => {\n  return (\n    <Flex h='100%' justify='center' align='center'>\n      <Image\n        borderRadius=\"full\"\n        boxSize=\"32px\"\n        src={`${process.env.PUBLIC_URL}/favicon.ico`}\n      />\n      <Heading as=\"h1\" size=\"md\" marginLeft=\"4\" isTruncated>\n        PEライン糸巻量計算ツール\n      </Heading>\n      <Spacer />\n      <ColorModeSwitcher />\n    </Flex>\n  )\n}\n","\nimport React from 'react'\nimport { Stack, Grid, GridItem } from '@chakra-ui/react'\nimport { CalculationResultTable } from './CalculationResultTable'\nimport { ReferenceValueForm } from './ReferenceValueForm'\nimport { Header } from './Header'\n\nexport const Template = () => {\n  return (\n    <Grid\n      minH=\"100vh\"\n      templateRows=\"72px 1fr\"\n      templateColumns={{\n        base: \"1fr\",\n        md: \"1fr 2fr 1fr\"\n      }}\n      templateAreas={{\n        base: '\"header\"\\\n               \"main\"',\n        md: '\"header      header header\"\\\n             \"left-space  main   right-space\"'\n      }}\n    >\n      <GridItem gridArea=\"header\" margin=\"4\">\n        <Header />\n      </GridItem>\n      <GridItem gridArea=\"main\" margin=\"4\">\n        <Stack spacing={6}>\n          <ReferenceValueForm />\n          <CalculationResultTable />\n        </Stack>\n      </GridItem>\n    </Grid>\n  )\n}\n","import * as React from 'react'\nimport { ChakraProvider, theme } from '@chakra-ui/react'\nimport { FormContextProvider } from './contexts/FormContextProvider'\nimport { Template } from './components/Template'\n\nexport const Main = () => {\n  return (\n    <ChakraProvider theme={theme}>\n      <FormContextProvider>\n        <Template />\n      </FormContextProvider>\n    </ChakraProvider>\n  )\n}\n","import { ColorModeScript } from '@chakra-ui/react'\nimport * as React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Main } from './main/index'\n\nReactDOM.render(\n  <React.StrictMode>\n    <ColorModeScript />\n    <Main />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}