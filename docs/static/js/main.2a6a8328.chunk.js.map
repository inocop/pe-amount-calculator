{"version":3,"sources":["main/contexts/form_context.ts","main/contexts/form_context_provider.tsx","shared/components/ColorModeSwitcher.tsx","main/components/template.tsx","main/index.tsx","index.tsx"],"names":["FormStateContex","React","FormCommandContext","reducer","produce","state","action","type","peSize","value","amount","FormContextProvider","children","command","dispatch","setPeSize","setAmount","generateCommand","Provider","ColorModeSwitcher","props","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","fontSize","variant","color","marginLeft","onClick","icon","aria-label","Template","textAlign","minH","p","justifySelf","spacing","href","target","rel","Main","theme","ReactDOM","render","document","getElementById"],"mappings":"6KAYaA,EAAkBC,gBAA+B,MACjDC,EAAqBD,gBAAiC,M,OCL7DE,EAAUC,aAAQ,SAACC,EAAkBC,GACzC,OAAQA,EAAOC,MACb,IAAK,eACHF,EAAMG,OAASF,EAAOG,MACtB,MACF,IAAK,eACHJ,EAAMK,OAASJ,EAAOG,MACtB,MACF,QACE,OAAOJ,MAeAM,EAAgC,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACnCX,aAAiBE,EAAS,CAAEK,OAAQ,KAAME,OAAQ,OADf,mBACtDL,EADsD,KAEvDQ,EAbgB,SAACC,GACvB,MAAO,CACLC,UAAW,SAACP,GACVM,EAAS,CAAEP,KAAM,eAAgBE,MAAOD,KAE1CQ,UAAW,SAACN,GACVI,EAAS,CAAEP,KAAM,eAAgBE,MAAOC,MAO5BO,CAF6C,MAI7D,OACE,cAACjB,EAAgBkB,SAAjB,CAA0BT,MAAOJ,EAAjC,SACE,cAACH,EAAmBgB,SAApB,CAA6BT,MAAOI,EAApC,SACGD,O,gFCjCIO,EAAsD,SAACC,GAAW,IACrEC,EAAoBC,cAApBD,gBACFE,EAAOC,YAAkB,OAAQ,SACjCC,EAAaD,YAAkBE,IAAQC,KAE7C,OACE,cAAC,IAAD,aACEC,KAAK,KACLC,SAAS,KACTC,QAAQ,QACRC,MAAM,UACNC,WAAW,IACXC,QAASZ,EACTa,KAAM,cAACT,EAAD,IACNU,aAAA,oBAAyBZ,EAAzB,UACIH,KChBGgB,EAAW,WACtB,OACE,cAAC,IAAD,CAAKC,UAAU,SAASR,SAAS,KAAjC,SACE,eAAC,IAAD,CAAMS,KAAK,QAAQC,EAAG,EAAtB,UACE,cAAC,EAAD,CAAmBC,YAAY,aAC/B,eAAC,IAAD,CAAQC,QAAS,EAAjB,UACE,eAAC,IAAD,mBACO,cAAC,IAAD,CAAMZ,SAAS,KAAf,yBADP,0BAGA,cAAC,IAAD,CAAME,MAAM,WAAWW,KAAK,wBAAwBb,SAAS,MAAMc,OAAO,SAASC,IAAI,sBAAvF,mCCTGC,EAAO,WAClB,OACE,cAAC,IAAD,CAAgBC,MAAOA,QAAvB,SACE,cAAC,EAAD,UACE,cAAC,EAAD,SCJRC,IAASC,OACP,eAAC,aAAD,WACE,cAAC,IAAD,IACA,cAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.2a6a8328.chunk.js","sourcesContent":["import * as React from 'react'\n\nexport type FormState = {\n  peSize: number | null\n  amount: number | null\n}\n\nexport type FormCommand = {\n  setPeSize: (peSize: number) => void\n  setAmount: (amount: number) => void\n}\n\nexport const FormStateContex = React.createContext<FormState>(null as any)\nexport const FormCommandContext = React.createContext<FormCommand>(null as any)\n","import * as React from 'react'\nimport produce from 'immer'\nimport { FormState, FormCommand, FormStateContex, FormCommandContext } from './form_context'\n\ntype Action =\n  | { type: 'commitPeSize'; value: number }\n  | { type: 'commitAmount'; value: number }\n\nconst reducer = produce((state: FormState, action: Action) => {\n  switch (action.type) {\n    case 'commitPeSize':\n      state.peSize = action.value\n      break\n    case 'commitAmount':\n      state.amount = action.value\n      break\n    default:\n      return state\n  }\n})\n\nconst generateCommand = (dispatch: React.Dispatch<Action>): FormCommand => {\n  return {\n    setPeSize: (peSize) => {\n      dispatch({ type: 'commitPeSize', value: peSize })\n    },\n    setAmount: (amount) => {\n      dispatch({ type: 'commitAmount', value: amount })\n    },\n  }\n}\n\nexport const FormContextProvider: React.FC = ({ children }) => {\n  const [state, dispatch] = React.useReducer(reducer, { peSize: null, amount: null })\n  const command = generateCommand(dispatch)\n\n  return (\n    <FormStateContex.Provider value={state}>\n      <FormCommandContext.Provider value={command}>\n        {children}\n      </FormCommandContext.Provider>\n    </FormStateContex.Provider>\n  )\n}\n\n","import * as React from 'react'\nimport { useColorMode, useColorModeValue, IconButton, IconButtonProps } from '@chakra-ui/react'\nimport { FaMoon, FaSun } from 'react-icons/fa'\n\ntype ColorModeSwitcherProps = Omit<IconButtonProps, 'aria-label'>\n\nexport const ColorModeSwitcher: React.FC<ColorModeSwitcherProps> = (props) => {\n  const { toggleColorMode } = useColorMode()\n  const text = useColorModeValue('dark', 'light')\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun)\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      variant=\"ghost\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      aria-label={`Switch to ${text} mode`}\n      {...props}\n    />\n  )\n}\n","\nimport React from 'react'\nimport { Box, Text, Link, VStack, Code, Grid } from '@chakra-ui/react'\nimport { ColorModeSwitcher } from '../../shared/components/ColorModeSwitcher'\n\nexport const Template = () => {\n  return (\n    <Box textAlign=\"center\" fontSize=\"xl\">\n      <Grid minH=\"100vh\" p={3}>\n        <ColorModeSwitcher justifySelf=\"flex-end\" />\n        <VStack spacing={8}>\n          <Text>\n            Edit <Code fontSize=\"xl\">src/App.tsx</Code> and save to reload.\n          </Text>\n          <Link color=\"teal.500\" href=\"https://chakra-ui.com\" fontSize=\"2xl\" target=\"_blank\" rel=\"noopener noreferrer\">\n            Learn Chakra\n          </Link>\n        </VStack>\n      </Grid>\n    </Box>\n  )\n}\n","import * as React from 'react'\nimport { ChakraProvider, theme } from '@chakra-ui/react'\nimport { FormContextProvider } from './contexts/form_context_provider'\nimport { Template } from './components/template'\n\nexport const Main = () => {\n  return (\n    <ChakraProvider theme={theme}>\n      <FormContextProvider>\n        <Template />\n      </FormContextProvider>\n    </ChakraProvider>\n  )\n}\n","import { ColorModeScript } from '@chakra-ui/react'\nimport * as React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Main } from './main/index'\n\nReactDOM.render(\n  <React.StrictMode>\n    <ColorModeScript />\n    <Main />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}